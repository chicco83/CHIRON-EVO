[include kiauh_macros.cfg]
[include macro.cfg]

[mcu]
serial: /dev/serial/by-id/usb-Silicon_Labs_CP2102N_USB_to_UART_Bridge_Controller_1c951ae2dc4ee8118d3bc0eec2460985-if00-port0
pin_map: arduino
restart_method: arduino
#   This controls the mechanism the host will use to reset the
#   micro-controller. The choices are 'arduino', 'cheetah', 'rpi_usb',
#   and 'command'. The 'arduino' method (toggle DTR) is common on
#   Arduino boards and clones. The 'cheetah' method is a special
#   method needed for some Fysetc Cheetah boards. The 'rpi_usb' method
#   is useful on Raspberry Pi boards with micro-controllers powered
#   over USB - it briefly disables power to all USB ports to
#   accomplish a micro-controller reset. The 'command' method involves
#   sending a Klipper command to the micro-controller so that it can
#   reset itself. The default is 'arduino' if the micro-controller
#   communicates over a serial port, 'command' otherwise.

[output_pin power]
pin: ar15
value: 1
shutdown_value: 0

[display_status]

[virtual_sdcard]
path: ~/gcode_files
#required by FLUIDD do not comment

[respond]
default_type: echo
#   Sets the default prefix of the "M118" and "RESPOND" output to one
#   of the following:
#       echo: "echo: " (This is the default)
#       command: "// "
#       error: "!! "
#default_prefix: echo:
#   Directly sets the default prefix. If present, this value will
#   override the "default_type".

[idle_timeout]
gcode:
  M83
#set relative distance
  M109 S180 
#make sure that themp is ok for retracting
  G1 E-50 F600
#retract filament out of hot zone
  TURN_OFF_HEATERS
  M84
#disable motors
  M300 S440 P200
  M300 S660 P250
  M300 S880 P300
# play notification sound
  M118 NO COMMAND RECEIVED FOR 5 MIN. IDLE TIMEOUT
# WRITE IDLE NOTIFICATION ON CONSOLE
#   A list of G-Code commands to execute on an idle timeout. See
#   docs/Command_Templates.md for G-Code format. The default is to run
#   "TURN_OFF_HEATERS" and "M84".
timeout: 1800
#   Idle time (in seconds) to wait before running the above G-Code
#   commands. The default is 600 seconds.

[printer]
kinematics: cartesian
max_velocity: 200
#   Maximum velocity (in mm/s) of the toolhead (relative to the
#   print). This parameter must be specified.
max_accel: 500
#   Maximum acceleration (in mm/s^2) of the toolhead (relative to the
#   print). This parameter must be specified.

max_accel_to_decel: 250
#   A pseudo acceleration (in mm/s^2) controlling how fast the
#   toolhead may go from acceleration to deceleration. It is used to
#   reduce the top speed of short zig-zag moves (and thus reduce
#   printer vibration from these moves). The default is half of
#   max_accel.

square_corner_velocity: 5.0
#   The maximum velocity (in mm/s) that the toolhead may travel a 90
#   degree corner at. A non-zero value can reduce changes in extruder
#   flow rates by enabling instantaneous velocity changes of the
#   toolhead during cornering. This value configures the internal
#   centripetal velocity cornering algorithm; corners with angles
#   larger than 90 degrees will have a higher cornering velocity while
#   corners with angles less than 90 degrees will have a lower
#   cornering velocity. If this is set to zero then the toolhead will
#   decelerate to zero at each corner. The default is 5mm/s.
max_z_velocity: 5
max_z_accel: 30

[temperature_sensor Raspberry CPU]                             
sensor_type: temperature_host                                  
sensor_path: /sys/class/thermal/thermal_zone0/temp         

#[temperature_sensor TMC_2209]
#sensor_type: EPCOS 100K B57560G104F
#sensor_pin: analog15

#[temperature_sensor Power_supply]
#sensor_type: EPCOS 100K B57560G104F
#sensor_pin: analog12

[stepper_x]
step_pin: ar54
#dir_pin: !ar55
#SET THIS FOR A4988 stock driver
dir_pin: ar55
#SET THIS FOR TMC 2209 
enable_pin: !ar38
rotation_distance: 40
microsteps: 16
#step_distance: .0125
endstop_pin: ^!ar3
position_min: -5
position_endstop: -5
position_max: 400
homing_speed: 80.0

[tmc2209 stepper_x]
#uart_pin: ar11
#SET THIS FOR TMC 2209 without soldering SERVO PIN
#uart_pin: ar4
#SET THIS FOR TMC 2209 on SERVO PIN
uart_pin: ar51
#SET THIS FOR TMC 2209 on SPI pin to leave servo pwm free for rgb led
#microsteps:16
run_current: .9
hold_current: .4
stealthchop_threshold: 250

[stepper_y]
step_pin: ar60
#dir_pin: !ar61
#SET THIS FOR A4988 stock driver
dir_pin: ar61
#SET THIS FOR TMC 2209
enable_pin: !ar56
rotation_distance: 32
microsteps: 16
#step_distance: .01
endstop_pin: ^!ar42
position_endstop: 0
position_max: 400
homing_speed: 80.0

[tmc2209 stepper_y]
#uart_pin: ar15
#SET THIS FOR TMC 2209 without soldering SERVO PIN
#uart_pin: ar5
#SET THIS FOR TMC 2209 on SERVO PIN
uart_pin: ar52
#SET THIS FOR TMC 2209 on SPI pin to leave servo pwm free for rgb led
#microsteps:16
run_current: 1.2
hold_current: .4
stealthchop_threshold: 250

[stepper_z]
step_pin: ar46
#dir_pin: !ar48
#SET THIS FOR A4988 stock driver
dir_pin: ar48
#SET THIS FOR TMC 2209
enable_pin: !ar62
rotation_distance: 8
microsteps: 16
#step_distance: .0025
endstop_pin: ^ar18
position_endstop: 0.0
position_max: 450
position_min: -6.0
homing_speed: 5.0

[tmc2209 stepper_z]
#uart_pin: ar14
#microsteps:16
#SET THIS FOR TMC 2209 without soldering SERVO PIN
#uart_pin: ar6
#SET THIS FOR TMC 2209 on SERVO PIN
uart_pin: ar50
#SET THIS FOR TMC 2209 on SPI pin to leave servo pwm free for rgb led
run_current: .95
hold_current: .4
stealthchop_threshold: 250


[stepper_z1]
step_pin: ar36
dir_pin: !ar34
#SET THIS FOR A4988 stock driver
dir_pin: ar34
#SET THIS FOR TMC 2209
enable_pin: !ar30
rotation_distance: 8
microsteps: 16
#step_distance: .0025
endstop_pin: ^ar43

[tmc2209 stepper_z1]
#uart_pin: ar52
#SET THIS FOR TMC 2209 without soldering SERVO PIN
uart_pin: ar12
#SET THIS FOR TMC 2209 on SERVO PIN
#microsteps:16
run_current: .95
hold_current: .4
stealthchop_threshold: 250

[endstop_phase stepper_z]
#endstop_accuracy:
#   Sets the expected accuracy (in mm) of the endstop. This represents
#   the maximum error distance the endstop may trigger (eg, if an
#   endstop may occasionally trigger 100um early or up to 100um late
#   then set this to 0.200 for 200um). The default is
#   4*rotation_distance/full_steps_per_rotation.
#trigger_phase:
#   This specifies the phase of the stepper motor driver to expect
#   when hitting the endstop. It is composed of two numbers separated
#   by a forward slash character - the phase and the total number of
#   phases (eg, "7/64"). Only set this value if one is sure the
#   stepper motor driver is reset every time the mcu is reset. If this
#   is not set, then the stepper phase will be detected on the first
#   home and that phase will be used on all subsequent homes.
#endstop_align_zero: False
#   If true then the position_endstop of the axis will effectively be
#   modified so that the zero position for the axis occurs at a full
#   step on the stepper motor. (If used on the Z axis and the print
#   layer height is a multiple of a full step distance then every
#   layer will occur on a full step.) The default is False.

[safe_z_home]
home_xy_position: -5,0
#   A X,Y coordinate (e.g. 100,100) where the Z homing should be
#   performed. This parameter must be provided.
#speed: 50.0
#   Speed at which the toolhead is moved to the safe Z home
#   coordinate. The default is 50 mm/s
z_hop: 5
#   Distance (in mm) to lift the Z axis prior to homing. This is
#   applied to any homing command, even if it doesn't home the Z axis.
#   If the Z axis is already homed and the current Z position is less
#   than z_hop, then this will lift the head to a height of z_hop. If
#   the Z axis is not already homed, then prior to any XY homing
#   movement the Z axis boundary checks are disabled and the head is
#   lifted by z_hop. If z_hop is specified, be sure to home the Z
#   immediately after any XY home requests so that the Z boundary
#   checks are accurate. The default is to not implement Z hop.
#z_hop_speed: 20.0
#   Speed (in mm/s) at which the Z axis is lifted prior to homing. The
#   default is 20mm/s.
#move_to_previous: False
#   When set to True, xy are reset to their previous positions after z
#   homing. The default is False.

[extruder]
step_pin: ar26
dir_pin: ar28
#SET THIS FOR A4988 stock driver
dir_pin: !ar28
#SET THIS FOR TMC 2209
enable_pin: !ar24
microsteps: 16
rotation_distance: 7.936
#   See the "stepper" section for a description of the above parameters.
#step_distance: .00244
nozzle_diameter: 1
#   Diameter of the nozzle orifice (in mm). This parameter must be
#   provided.
filament_diameter: 1.75
#   The nominal diameter of the raw filament (in mm) as it enters the
#   extruder. This parameter must be provided.
max_extrude_cross_section: 4
#   Maximum area (in mm^2) of an extrusion cross section (eg,
#   extrusion width multiplied by layer height). This setting prevents
#   excessive amounts of extrusion during relatively small XY moves.
#   If a move requests an extrusion rate that would exceed this value
#   it will cause an error to be returned. The default is: 4.0 *
#   nozzle_diameter^2
instantaneous_corner_velocity: 1.000
#   The maximum instantaneous velocity change (in mm/s) of the
#   extruder during the junction of two moves. The default is 1mm/s.
max_extrude_only_distance: 600.0
#   Maximum length (in mm of raw filament) that a retraction or
#   extrude-only move may have. If a retraction or extrude-only move
#   requests a distance greater than this value it will cause an error
#   to be returned. The default is 50mm.
#max_extrude_only_velocity:
#max_extrude_only_accel:
#   Maximum velocity (in mm/s) and acceleration (in mm/s^2) of the
#   extruder motor for retractions and extrude-only moves. These
#   settings do not have any impact on normal printing moves. If not
#   specified then they are calculated to match the limit an XY
#   printing move with a cross section of 4.0*nozzle_diameter^2 would
#   have.
pressure_advance: 0
#   The amount of raw filament to push into the extruder during
#   extruder acceleration. An equal amount of filament is retracted
#   during deceleration. It is measured in millimeters per
#   millimeter/second. The default is 0, which disables pressure
#   advance.
pressure_advance_smooth_time: 0.040
#   A time range (in seconds) to use when calculating the average
#   extruder velocity for pressure advance. A larger value results in
#   smoother extruder movements. This parameter may not exceed 200ms.
#   This setting only applies if pressure_advance is non-zero. The
#   default is 0.040 (40 milliseconds).
#
# The remaining variables describe the extruder heater.
heater_pin: ar10
#   PWM output pin controlling the heater. This parameter must be
#   provided.
#max_power: 1.0
#   The maximum power (expressed as a value from 0.0 to 1.0) that the
#   heater_pin may be set to. The value 1.0 allows the pin to be set
#   fully enabled for extended periods, while a value of 0.5 would
#   allow the pin to be enabled for no more than half the time. This
#   setting may be used to limit the total power output (over extended
#   periods) to the heater. The default is 1.0.
sensor_type: ATC Semitec 104GT-2
#   Type of sensor - common thermistors are "EPCOS 100K B57560G104F",
#   "ATC Semitec 104GT-2", "NTC 100K beta 3950", "Honeywell 100K
#   135-104LAG-J01", "NTC 100K MGB18-104F39050L32", "SliceEngineering
#   450", and "TDK NTCG104LH104JT1". See the "Temperature sensors"
#   section for other sensors. This parameter must be provided.
sensor_pin: analog13
#   Analog input pin connected to the sensor. This parameter must be
#   provided.
#pullup_resistor: 4700
#   The resistance (in ohms) of the pullup attached to the thermistor.
#   This parameter is only valid when the sensor is a thermistor. The
#   default is 4700 ohms.
#smooth_time: 2.0
#   A time value (in seconds) over which temperature measurements will
#   be smoothed to reduce the impact of measurement noise. The default
#   is 2 seconds.
#control: pid
#   Control algorithm (either pid or watermark). This parameter must
#   be provided.
#pid_Kp: 23.04
#   Kp is the "proportional" constant for the pid. This parameter must
#   be provided for PID heaters.
#pid_Ki: 2.46
#   Ki is the "integral" constant for the pid. This parameter must be
#   provided for PID heaters.
#pid_Kd: 53.92
#   Kd is the "derivative" constant for the pid. This parameter must
#   be provided for PID heaters.
#pid_integral_max:
#   The maximum "windup" the integral term may accumulate. The default
#   is to use the same value as max_power.
#max_delta: 2.0
#   On 'watermark' controlled heaters this is the number of degrees in
#   Celsius above the target temperature before disabling the heater
#   as well as the number of degrees below the target before
#   re-enabling the heater. The default is 2 degrees Celsius.
#pwm_cycle_time: 0.100
#   Time in seconds for each software PWM cycle of the heater. It is
#   not recommended to set this unless there is an electrical
#   requirement to switch the heater faster than 10 times a second.
#   The default is 0.100 seconds.
min_extrude_temp: 170
#   The minimum temperature (in Celsius) at which extruder move
#   commands may be issued. The default is 170 Celsius.
min_temp: 10
max_temp: 285
#   The maximum range of valid temperatures (in Celsius) that the
#   heater must remain within. This controls a safety feature
#   implemented in the micro-controller code - should the measured
#   temperature ever fall outside this range then the micro-controller
#   will go into a shutdown state. This check can help detect some
#   heater and sensor hardware failures. Set this range just wide
#   enough so that reasonable temperatures do not result in an error.
#   These parameters must be provided.

[tmc2209 extruder]
#uart_pin: ar51
#SET THIS FOR TMC 2209 without soldering SERVO PIN
uart_pin: ar11
#SET THIS FOR TMC 2209 on SERVO PIN
#microsteps:16
run_current: 1.0
hold_current: .4
stealthchop_threshold: 250

[verify_heater extruder]
max_error: 120
#   The maximum "cumulative temperature error" before raising an
#   error. Smaller values result in stricter checking and larger
#   values allow for more time before an error is reported.
#   Specifically, the temperature is inspected once a second and if it
#   is close to the target temperature then an internal "error
#   counter" is reset; otherwise, if the temperature is below the
#   target range then the counter is increased by the amount the
#   reported temperature differs from that range. Should the counter
#   exceed this "max_error" then an error is raised. The default is
#   120.
check_gain_time: 20
#   This controls heater verification during initial heating. Smaller
#   values result in stricter checking and larger values allow for
#   more time before an error is reported. Specifically, during
#   initial heating, as long as the heater increases in temperature
#   within this time frame (specified in seconds) then the internal
#   "error counter" is reset. The default is 20 seconds for extruders
#   and 60 seconds for heater_bed.
hysteresis: 5
#   The maximum temperature difference (in Celsius) to a target
#   temperature that is considered in range of the target. This
#   controls the max_error range check. It is rare to customize this
#   value. The default is 5.
heating_gain: 2
#   The minimum temperature (in Celsius) that the heater must increase
#   by during the check_gain_time check. It is rare to customize this
#   value. The default is 2.


######################################################################
# Bed
######################################################################

[heater_bed]
heater_pin: ar45
sensor_type: EPCOS 100K B57560G104F
sensor_pin: analog14
#control: pid a 70 gradi
min_temp: 10
max_temp: 110

[verify_heater heater_bed]
max_error: 120
#   The maximum "cumulative temperature error" before raising an
#   error. Smaller values result in stricter checking and larger
#   values allow for more time before an error is reported.
#   Specifically, the temperature is inspected once a second and if it
#   is close to the target temperature then an internal "error
#   counter" is reset; otherwise, if the temperature is below the
#   target range then the counter is increased by the amount the
#   reported temperature differs from that range. Should the counter
#   exceed this "max_error" then an error is raised. The default is
#   120.
check_gain_time: 60
#   This controls heater verification during initial heating. Smaller
#   values result in stricter checking and larger values allow for
#   more time before an error is reported. Specifically, during
#   initial heating, as long as the heater increases in temperature
#   within this time frame (specified in seconds) then the internal
#   "error counter" is reset. The default is 20 seconds for extruders
#   and 60 seconds for heater_bed.
hysteresis: 5
#   The maximum temperature difference (in Celsius) to a target
#   temperature that is considered in range of the target. This
#   controls the max_error range check. It is rare to customize this
#   value. The default is 5.
heating_gain: 2
#   The minimum temperature (in Celsius) that the heater must increase
#   by during the check_gain_time check. It is rare to customize this
#   value. The default is 2.


[bed_mesh]
speed: 60
#The speed in which the tool moves between points.
horizontal_move_z: 30
#The Z coordinate the probe rises to prior to traveling between points.
mesh_min: 10,10
mesh_max: 390, 390
probe_count: 6,6
mesh_pps: 2,2
algorithm: bicubic
bicubic_tension: 0.2
fade_start: 1
fade_end: 10

[probe]
pin: ar2
x_offset: -1.0
y_offset: -2.0
speed: 5.0
samples: 3
sample_retract_dist: 2.0
samples_result: average
samples_tolerance: 0.100
samples_tolerance_retries: 0


######################################################################
# Fans
######################################################################

[fan]
pin: ar9
#print cooling fan (FAN0)

[heater_fan extruder_fan]
pin: ar44
#hotend heater fan (FAN2)
heater: extruder

#[fan_generic stepper_driver_fan]
#motherboard fan (FAN1)
#pin: ar7
#max_power: 1.0
#shutdown_speed: 1.0
#cycle_time:
#hardware_pwm:
#kick_start_time: 10
#off_below:
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
#   See the "fan" section for a description of the above parameters.

[temperature_fan stepper_driver_fan]
#motherboard fan (FAN1)
pin: ar7
#max_power:
#shutdown_speed:
#cycle_time:
#hardware_pwm:
#kick_start_time:
#off_below:
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
#   See the "fan" section for a description of the above parameters.
sensor_type: EPCOS 100K B57560G104F
sensor_pin: analog15
control: watermark
#pid_Kp:
#pid_Ki:
#pid_Kd:
#pid_deriv_time:
#pid_integral_max:
#max_delta:
min_temp: 10
max_temp: 50
#   See the "extruder" section for a description of the above parameters.
target_temp: 40.0
#   A temperature (in Celsius) that will be the target temperature.
#   The default is 40 degrees.
#max_speed: 1.0
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when the sensor temperature exceeds the set value.
#   The default is 1.0.
#min_speed: 0.3
#   The minimum fan speed (expressed as a value from 0.0 to 1.0) that
#   the fan will be set to for PID temperature fans.
#   The default is 0.3.
#gcode_id:
#   If set, the temperature will be reported in M105 queries using the
#   given id. The default is to not report the temperature via M105.

######################################################################
# SPECIAL FUNCTIONS
######################################################################


[pause_resume]
recover_velocity: 50
#   When capture/restore is enabled, the speed at which to return to
#   the captured position (in mm/s). Default is 50.0 mm/s.

[gcode_arcs]
resolution: 1.0
#   An arc will be split into segments. Each segment's length will
#   equal the resolution in mm set above. Lower values will produce a
#   finer arc, but also more work for your machine. Arcs smaller than
#   the configured value will become straight lines. The default is
#   1mm.

[input_shaper]
#shaper_freq_x: 0
#   A frequency (in Hz) of the input shaper for X axis. This is
#   usually a resonance frequency of X axis that the input shaper
#   should suppress. For more complex shapers, like 2- and 3-hump EI
#   input shapers, this parameter can be set from different
#   considerations. The default value is 0, which disables input
#   shaping for X axis.
#shaper_freq_y: 0
#   A frequency (in Hz) of the input shaper for Y axis. This is
#   usually a resonance frequency of Y axis that the input shaper
#   should suppress. For more complex shapers, like 2- and 3-hump EI
#   input shapers, this parameter can be set from different
#   considerations. The default value is 0, which disables input
#   shaping for Y axis.
#shaper_type: mzv
#   A type of the input shaper to use for both X and Y axes. Supported
#   shapers are zv, mzv, zvd, ei, 2hump_ei, and 3hump_ei. The default
#   is mzv input shaper.
#shaper_type_x:
#shaper_type_y:
#   If shaper_type is not set, these two parameters can be used to
#   configure different input shapers for X and Y axes. The same
#   values are supported as for shaper_type parameter.
#damping_ratio_x: 0.1
#damping_ratio_y: 0.1
#   Damping ratios of vibrations of X and Y axes used by input shapers
#   to improve vibration suppression. Default value is 0.1 which is a
#   good all-round value for most printers. In most circumstances this
#   parameter requires no tuning and should not be changed.

#[adxl345]
#cs_pin:
#   The SPI enable pin for the sensor. This parameter must be provided.
#spi_speed: 5000000
#   The SPI speed (in hz) to use when communicating with the chip.
#   The default is 5000000.
#spi_bus:
#spi_software_sclk_pin:
#spi_software_mosi_pin:
#spi_software_miso_pin:
#   See the "common SPI settings" section for a description of the
#   above parameters.
#axes_map: x,y,z
#   The accelerometer axis for each of the printer's x, y, and z axes.
#   This may be useful if the accelerometer is mounted in an
#   orientation that does not match the printer orientation. For
#   example, one could set this to "y,x,z" to swap the x and y axes.
#   It is also possible to negate an axis if the accelerometer
#   direction is reversed (eg, "x,z,-y"). The default is "x,y,z".
#rate: 3200
#   Output data rate for ADXL345. ADXL345 supports the following data
#   rates: 3200, 1600, 800, 400, 200, 100, 50, and 25. Note that it is
#   not recommended to change this rate from the default 3200, and
#   rates below 800 will considerably affect the quality of resonance

#[resonance_tester]
#probe_points:
#   A list of X,Y,Z coordinates of points (one point per line) to test
#   resonances at. At least one point is required. Make sure that all
#   points with some safety margin in XY plane (~a few centimeters)
#   are reachable by the toolhead.
#accel_chip:
#   A name of the accelerometer chip to use for measurements. If
#   adxl345 chip was defined without an explicit name, this parameter
#   can simply reference it as "accel_chip: adxl345", otherwise an
#   explicit name must be supplied as well, e.g. "accel_chip: adxl345
#   my_chip_name". Either this, or the next two parameters must be
#   set.
#accel_chip_x:
#accel_chip_y:
#   Names of the accelerometer chips to use for measurements for each
#   of the axis. Can be useful, for instance, on bed slinger printer,
#   if two separate accelerometers are mounted on the bed (for Y axis)
#   and on the toolhead (for X axis). These parameters have the same
#   format as 'accel_chip' parameter. Only 'accel_chip' or these two
#   parameters must be provided.
#max_smoothing:
#   Maximum input shaper smoothing to allow for each axis during shaper
#   auto-calibration (with 'SHAPER_CALIBRATE' command). By default no
#   maximum smoothing is specified. Refer to Measuring_Resonances guide
#   for more details on using this feature.
#min_freq: 5
#   Minimum frequency to test for resonances. The default is 5 Hz.
#max_freq: 120
#   Maximum frequency to test for resonances. The default is 120 Hz.
#accel_per_hz: 75
#   This parameter is used to determine which acceleration to use to
#   test a specific frequency: accel = accel_per_hz * freq. Higher the
#   value, the higher is the energy of the oscillations. Can be set to
#   a lower than the default value if the resonances get too strong on
#   the printer. However, lower values make measurements of
#   high-frequency resonances less precise. The default value is 75
#   (mm/sec).
#hz_per_sec: 1
#   Determines the speed of the test. When testing all frequencies in
#   range [min_freq, max_freq], each second the frequency increases by
#   hz_per_sec. Small values make the test slow, and the large values
#   will decrease the precision of the test. The default value is 1.0
#   (Hz/sec == sec^-2).

[filament_switch_sensor Sensore_filamento]
pause_on_runout: True
#   When set to True, a PAUSE will execute immediately after a runout
#   is detected. Note that if pause_on_runout is False and the
#   runout_gcode is omitted then runout detection is disabled. Default
#   is True.
runout_gcode:
  M300 S440 P200
  M300 S660 P250
  M300 S880 P300
#   A list of G-Code commands to execute after a filament runout is
#   detected. See docs/Command_Templates.md for G-Code format. If
#   pause_on_runout is set to True this G-Code will run after the
#   PAUSE is complete. The default is not to run any G-Code commands.
#insert_gcode:
#  M83
#  G1 E40 F600
#  G1 E520 F2500
#  G1 E60 F600
 # resume
#   A list of G-Code commands to execute after a filament insert is
#   detected. See docs/Command_Templates.md for G-Code format. The
#   default is not to run any G-Code commands, which disables insert
#   detection.
event_delay: 5.0
#   The minimum amount of time in seconds to delay between events.
#   Events triggered during this time period will be silently
#   ignored. The default is 3 seconds.
#pause_delay: 0.5
#   The amount of time to delay, in seconds, between the pause command
#   dispatch and execution of the runout_gcode. It may be useful to
#   increase this delay if OctoPrint exhibits strange pause behavior.
#   Default is 0.5 seconds.
switch_pin: !ar33
#   The pin on which the switch is connected. This parameter must be
#   provided.



######################################################################
# Start Print and End Print
######################################################################

# Replace the slicer's custom start and end g-code scripts with
# START_PRINT and END_PRINT.


    



######################################################################
# Beeper
######################################################################

# M300 : Play tone. Beeper support, as commonly found on usual LCD
# displays (i.e. RepRapDiscount 2004 Smart Controller, RepRapDiscount
# 12864 Full Graphic). This defines a custom I/O pin and a custom
# GCODE macro.  Usage:
#   M300 [P<ms>] [S<Hz>]
#   P is the tone duration, S the tone frequency.
# The frequency won't be pitch perfect.

[output_pin BEEPER_pin]
pin: ar31
#   Beeper pin. This parameter must be provided.

pwm: True
#   A piezo beeper needs a PWM signal, a DC buzzer doesn't.
value: 0
#   Silent at power on, set to 1 if active low.
shutdown_value: 0
#   Disable at emergency shutdown (no PWM would be available anyway).
cycle_time: 0.001
#   PWM frequency : 0.001 = 1ms will give a base tone of 1kHz
scale: 1000
#   PWM parameter will be in the range of (0-1000 Hz).
#   Although not pitch perfect.

[gcode_macro M300]
default_parameter_S: 1000
#   Use a default 1kHz tone if S is omitted.
default_parameter_P: 100
#   Use a 10ms duration is P is omitted.
gcode:
    SET_PIN PIN=BEEPER_pin VALUE={S}
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0












######################################################################
# AUTO SET VALUES
######################################################################

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 73.681
#*# pid_ki = 2.468
#*# pid_kd = 549.848
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 29.821
#*# pid_ki = 2.185
#*# pid_kd = 101.764
#*#
#*# [endstop_phase stepper_z]
#*# trigger_phase = 5/64
#*#
#*# [probe]
#*# z_offset = 25.300
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  -0.622500, -0.725000, -0.853333, -1.022500, -1.217500, -1.460833
#*# 	  -1.062500, -1.091667, -1.204167, -1.345833, -1.503333, -1.672500
#*# 	  -1.399167, -1.349167, -1.430000, -1.528333, -1.634167, -1.755000
#*# 	  -1.505833, -1.454167, -1.515833, -1.599167, -1.682500, -1.741667
#*# 	  -1.544167, -1.552500, -1.658333, -1.739167, -1.811667, -1.848333
#*# 	  -1.477500, -1.564167, -1.668333, -1.748333, -1.819167, -1.845833
#*# tension = 0.2
#*# min_x = 10.0
#*# algo = bicubic
#*# y_count = 6
#*# mesh_y_pps = 2
#*# min_y = 10.0
#*# x_count = 6
#*# max_y = 390.0
#*# mesh_x_pps = 2
#*# max_x = 390.0
